
apply plugin: 'java'
apply plugin: 'eclipse'

archivesBaseName = project.hasProperty('archivePrefix') ? archivePrefix + name : 'twinstone_' + name

releaseResolver = new org.apache.ivy.plugins.resolver.URLResolver()
releaseResolver.name = 'Artifactory (twinstone releases)'
releaseResolver.m2compatible = true
releaseResolver.addArtifactPattern artifactoryUrl + '/libs-release-local/[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
releaseResolver.addIvyPattern artifactoryUrl + '/libs-release-local/[organisation]/[module]/[revision]/ivy.xml'

genericResolver = new org.apache.ivy.plugins.resolver.IBiblioResolver()
genericResolver.name = 'Artifactory (general releases)'
genericResolver.m2compatible = true
genericResolver.root = artifactoryUrl+'/libs-release'

snapshotResolver = new org.apache.ivy.plugins.resolver.URLResolver()
snapshotResolver.name = 'Artifactory (twinstone snapshots)'
snapshotResolver.m2compatible = true
snapshotResolver.addArtifactPattern artifactoryUrl + '/libs-snapshot-local/[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
snapshotResolver.addIvyPattern artifactoryUrl + '/libs-snapshot-local/[organisation]/[module]/[revision]/ivy.xml'
snapshotResolver.changingPattern = '.*-SNAPSHOT'
snapshotResolver.checkmodified = true

uploadResolver = snapshotResolver
org.apache.ivy.util.url.CredentialsStore.INSTANCE.addCredentials("Artifactory Realm", "twinstone.etn.cz", artifactoryUser, artifactoryPass)
buildDir = new java.io.File(projectDir, '../build-main')

repositories {
	add(new org.apache.ivy.plugins.resolver.ChainResolver()) {
		name = 'Main Resolver'
		add releaseResolver
		add snapshotResolver
		add genericResolver
	}
}

if (version.endsWith('-SNAPSHOT')) {
   version = version - '-SNAPSHOT' + '-' + String.format("%tY%<tm%<td-%<tH%<tM", new Date()) + '-SNAPSHOT'
   latestStatus = 'latest.integration'
   releasing = false
} else {
   releasing = true
   latestStatus = 'latest.release'
}

configurations {
	compression
	testCompile {transitive=true}
}

sourceSets {
	test {
		java {
			srcDir '../test'
		}
	}
}
	
dependencies {
	compression group: 'com.yahoo.platform.yui', name: 'yuicompressor', version: '2.3.6'
	testCompile group: 'junit', name: 'junit', version: '4.8.+'
	testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.5.0'
	testCompile group: 'org.eclipse.jetty', name: 'jetty-server', version: '7.2.+'
	testCompile group: 'org.eclipse.jetty', name: 'jetty-util', version: '7.2.+'
	testCompile group: 'log4j', name: 'log4j', version: '1.2.15'
}

task prepareJs << {
	copy {
		from '../banner.txt'
		into '../build-main/js'
		expand(projectUrl: projectUrl, productVersion:version)
	}
	ant.concat(destfile: "../build-main/js/tdi-bundle.js", encoding: "UTF-8", fixlastline: "yes") {
		fileset(dir: "../build-main/js", includes: "banner.txt")
		filelist(dir: '../src/js', files: "tdi.js,tdi-ajax.js,tdi-tools.js")
	}
}

task compress(type:JavaExec, dependsOn: prepareJs) {
   main = 'com.yahoo.platform.yui.compressor.YUICompressor'
   classpath = classpath + configurations.compression
   args += "--nomunge"
   args += "--preserve-semi"
   args += "--type"
   args += "js"
   args +="--charset"
   args += "utf8"
   args += "-o"
   args += "../build-main/js/tdi-bundle-min-temp.js"
   args += "../build-main/js/tdi-bundle.js"
}

task makeJs(dependsOn: compress) << {
	ant.concat(destfile: "../build-main/js/tdi-bundle-min.js", encoding: "UTF-8", fixlastline: "yes") {
		fileset(dir: "../build-main/js", includes: "banner.txt")
		fileset(dir: "../build-main/js", includes: "tdi-bundle-min-temp.js")
	}
	ant.concat(destfile: "../build-main/js/tdi-bundle-all-min.js", encoding: "UTF-8", fixlastline: "yes") {
		fileset(dir: "../build-main/js", includes: "banner.txt")
		fileset(dir: "../src/js/jquery", includes: "jquery-1.6.3-patched.min.js")
		fileset(dir: "../build-main/js", includes: "tdi-bundle-min-temp.js")
	}
	delete("../build-main/js/tdi-bundle-min-temp.js")
	copy {
		into "../build-main/js"
		from('../src/js/jquery') {
      		include '*.js'
      	}
	}
}

task jsJar(type: Jar, dependsOn: makeJs) {
	into 'META-INF/resources/twinstone_tdi/js'
	from('../build-main/js') {
		include '*.js'
	}
}

artifacts {
	archives (jsJar) {
		type = 'bundle'
	}
}

uploadArchives {
	uploadDescriptor = true
	repositories {
		add(releasing ? releaseResolver : uploadResolver)
	}
}

