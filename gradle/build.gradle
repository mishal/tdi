
apply plugin: 'java'
apply plugin: 'eclipse'

archivesBaseName = project.hasProperty('archivePrefix') ? archivePrefix + name : 'twinstone_' + name

inc = new java.io.File(projectDir,'../../Twinstone Common/repositories.gradle')
apply from: inc.exists() ? inc : artifactoryUrl+'/config/repositories-0.8.0.gradle'

buildDir = new java.io.File(projectDir, '../build-main')

repositories {
	add(new org.apache.ivy.plugins.resolver.ChainResolver()) {
		name = 'Main Resolver'
		add releaseResolver
		add snapshotResolver
		add genericResolver
	}
}


configurations {
	compression
	testCompile
}

sourceSets {
	test {
		java {
			srcDir '../test'
		}
	}
}
	
dependencies {
	compression group: 'com.yahoo.platform.yui', name: 'yuicompressor', version: '2.3.6'
	testCompile group: 'junit', name: 'junit', version: '4.8.+'
	testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.5.0'
	testCompile group: 'org.eclipse.jetty', name: 'jetty-server', version: '7.2.+'
	testCompile group: 'org.eclipse.jetty', name: 'jetty-util', version: '7.2.+'
	testCompile group: 'log4j', name: 'log4j', version: '1.2.15'
}

task prepareJs << {
	copy {
		from '../banner.txt'
		into '../build-main/js'
		expand(projectUrl: projectUrl, productVersion:version)
	}
	ant.concat(destfile: "../build-main/js/tdi-bundle.js", encoding: "UTF-8", fixlastline: "yes") {
		fileset(dir: "../build-main/js", includes: "banner.txt")
		filelist(dir: '../src/js', files: "tdi.js,tdi-ajax.js,tdi-tools.js")
	}
}

task compress(type:JavaExec, dependsOn: prepareJs) {
   main = 'com.yahoo.platform.yui.compressor.YUICompressor'
   classpath = classpath + configurations.compression
   args += "--nomunge"
   args += "--preserve-semi"
   args += "--type"
   args += "js"
   args +="--charset"
   args += "utf8"
   args += "-o"
   args += "../build-main/js/tdi-bundle-min-temp.js"
   args += "../build-main/js/tdi-bundle.js"
}

task makeJs(dependsOn: compress) << {
	ant.concat(destfile: "../build-main/js/tdi-bundle-min.js", encoding: "UTF-8", fixlastline: "yes") {
		fileset(dir: "../build-main/js", includes: "banner.txt")
		fileset(dir: "../build-main/js", includes: "tdi-bundle-min-temp.js")
	}
	ant.concat(destfile: "../build-main/js/tdi-bundle-all-min.js", encoding: "UTF-8", fixlastline: "yes") {
		fileset(dir: "../build-main/js", includes: "banner.txt")
		fileset(dir: "../src/js/jquery", includes: "jquery-1.6.4rc1-patched.min.js")
		fileset(dir: "../build-main/js", includes: "tdi-bundle-min-temp.js")
	}
	delete("../build-main/js/tdi-bundle-min-temp.js")
	copy {
		into "../build-main/js"
		from('../src/js/jquery') {
      		include '*.js'
      	}
	}
}
//disable creation of default jar, only jsJar should be published
classes.enabled = false
jar.enabled = false
configurations.archives.artifacts.each {if (it.type=='jar') configurations.archives.removeArtifact(it)}

test.dependsOn makeJs

test {
	includes += "**/*Test.class"
	ignoreFailures = !releasing
}

task jsJar(type: Jar, dependsOn: makeJs) {
	into 'META-INF/resources/tdi/js'
	from('../build-main/js') {
		include '*.js'
	}
}

artifacts {
	archives (jsJar) {
		type = 'bundle'
	}
}

uploadArchives {
	uploadDescriptor = true
	repositories {
		add(releasing ? releaseResolver : snapshotResolver)
	}
}

task javadoc(overwrite: true) << {
	copy {
		into '../build-main/in'
	   	from('../src') {include '*.js'}
	}
	exec {
		executable pythonBin
		args += yuidocHome+"/bin/yuidoc.py"
		args += '../build-main/in'
		args += "-s"
		args += "-p"
		args += '../build-main/in'
		args += "-o"
		args += '../build-main/javadoc'
		args += "-t"
		args += yuidocTemplate
		args += "-v"
		args += baseVersion
		args += "-m"
		args += "Twinstone TDI"
		args += "-u"
		args += projectUrl
	}
	inc = new java.io.File(projectDir,'../../Twinstone Common/webdav.gradle')
	webdav = new GroovyClassLoader(getClass().classLoader).parseClass(new GroovyCodeSource(inc.exists() ? inc.toURI().toURL() : new java.net.URL(artifactoryUrl+'/config/webdav-0.8.0.gradle'))).newInstance()
	webdav.delete('/javadoc/tdi/'+baseVersion+'/', true)
	webdav.mkcol('/javadoc/tdi/'+baseVersion+'/')
	webdav.putTree('/javadoc/tdi/'+baseVersion+'/', new java.io.File('../build-main/javadoc'))
}
